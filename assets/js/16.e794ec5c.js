(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{381:function(s,t,a){"use strict";a.r(t);var n=a(9),e=Object(n.a)({},function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h1",{attrs:{id:"类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类","aria-hidden":"true"}},[s._v("#")]),s._v(" 类")]),s._v(" "),a("blockquote",[a("p",[s._v("我写下这段代码，并期望它抛出错误")])]),s._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Empty")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* empty */")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" e2"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" Empty "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("请参阅此问题「"),a("router-link",{attrs:{to:"/faqs/type-system-behavior.html#为什么所有的类型，都能赋值给一个空的接口？"}},[s._v("为什么所有的内容都能赋值给空的接口")]),s._v("」。值得重新思考一下这个答案的建议：一般来说，你永远不应该声明一个没有属性的类。即使对于子类也是如此：")],1),s._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Base")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  important"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  properties"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Alpha")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Base")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Bravo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Base")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[a("code",[s._v("Alpha")]),s._v(" 和 "),a("code",[s._v("Bravo")]),s._v(" 的结构相同，都是继承自 "),a("code",[s._v("Base")]),s._v("，这会产生许多令人惊讶的效果，所以别这么做。如果你想让 "),a("code",[s._v("Alpha")]),s._v(" 与 "),a("code",[s._v("Bravo")]),s._v(" 不相同，为它们各自提供一个属性。")]),s._v(" "),a("h2",{attrs:{id:"什么是名义上的类"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是名义上的类","aria-hidden":"true"}},[s._v("#")]),s._v(" 什么是名义上的类")]),s._v(" "),a("p",[s._v("这两段代码该如何解释：")]),s._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Alpha")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Bravo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Charlie")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Delta")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Alpha")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  b "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Bravo")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  c "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Charlie")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v("\n  d "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Delta")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\na "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// OK")]),s._v("\nc "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" d"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Error")]),s._v("\n")])])]),a("p",[s._v("在 TypeScript 中，类进行结构上的比较，有一个例外是对于 "),a("code",[s._v("private")]),s._v(" 与 "),a("code",[s._v("protected")]),s._v(" 的成员。当一个成员是 "),a("code",[s._v("private")]),s._v(" 或者 "),a("code",[s._v("protected")]),s._v(" 时，它们必须来自同一个声明，才能被视为与另一个 "),a("code",[s._v("private")]),s._v(" 或者 "),a("code",[s._v("protected")]),s._v(" 的成员相同。")]),s._v(" "),a("h2",{attrs:{id:"为什么在我的实例方法中，this-成了一个「孤儿」？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么在我的实例方法中，this-成了一个「孤儿」？","aria-hidden":"true"}},[s._v("#")]),s._v(" 为什么在我的实例方法中，"),a("code",[s._v("this")]),s._v(" 成了一个「孤儿」？")]),s._v(" "),a("blockquote",[a("p",[s._v("我写下如下代码")])]),s._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyClass")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  x "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("someCallback")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token builtin"}},[s._v("console")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Prints 'undefined', not 10")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("someMethod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v('// Throws error "this.method is not a function"')]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("someMethod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" obj "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyClass")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nwindow"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("setTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("someCallback"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("可能会提出一些相似的问题：")]),s._v(" "),a("ul",[a("li",[s._v("为什么在我的回调函数中类的属性没有定义？")]),s._v(" "),a("li",[s._v("为什么在我的回调函数中，"),a("code",[s._v("this")]),s._v(" 指向 "),a("code",[s._v("window")]),s._v("？")]),s._v(" "),a("li",[s._v("为什么在我的回调函数中，"),a("code",[s._v("this")]),s._v(" 指向 "),a("code",[s._v("undefined")]),s._v("？")]),s._v(" "),a("li",[s._v("为什么我会得到 "),a("code",[s._v("this.someMethod is not a function")]),s._v(" 的错误？")]),s._v(" "),a("li",[s._v("为什么我会得到 "),a("code",[s._v("Cannot read property 'someMethod' of undefined")]),s._v(" 的错误？")])]),s._v(" "),a("p",[s._v("在 JavaScript 中，"),a("code",[s._v("this")]),s._v(" 值由以下确定：")]),s._v(" "),a("ol",[a("li",[a("p",[s._v("该函数是调用 "),a("code",[s._v(".bind")]),s._v(" 的结果吗？如果是这样，"),a("code",[s._v("this")]),s._v(" 由传递给 "),a("code",[s._v("bind")]),s._v(" 的第一个参数确定")])]),s._v(" "),a("li",[a("p",[s._v("该函数是通过属性表达式 "),a("code",[s._v("expr.method() ?")]),s._v(" 直接调用吗？如果是这样，"),a("code",[s._v("this")]),s._v(" 指向 "),a("code",[s._v("expr")])])]),s._v(" "),a("li",[a("p",[s._v("否则，"),a("code",[s._v("this")]),s._v(" 是 "),a("code",[s._v("undefined")]),s._v("（在严格模式中），或者是 "),a("code",[s._v("window")]),s._v(" （非严格模式中）。")])])]),s._v(" "),a("p",[s._v("在上一个例子中，影响结果的是这行代码：")]),s._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[s._v("window"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("setTimeout")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("obj"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("someCallback"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("在这里，我们提供了 "),a("code",[s._v("obj.someCallback")]),s._v(" 到 "),a("code",[s._v("setTimeout")]),s._v(" 的函数引用，然后该函数并不是作为 "),a("code",[s._v("bind")]),s._v(" 的结果调用，也不是直接作为一个方法调用。因此在 "),a("code",[s._v("someCallback")]),s._v(" 里的 "),a("code",[s._v("this")]),s._v(" 指向 "),a("code",[s._v("window")]),s._v("（或者在严格模式下的 "),a("code",[s._v("undefied")]),s._v("）。")]),s._v(" "),a("p",[s._v("这里概述了一些解决办法：http://stackoverflow.com/a/20627988/1704166")]),s._v(" "),a("h3",{attrs:{id:"当-bar-是一个-class-时，bar-和-typeof-bar-有什么区别？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#当-bar-是一个-class-时，bar-和-typeof-bar-有什么区别？","aria-hidden":"true"}},[s._v("#")]),s._v(" 当 "),a("code",[s._v("Bar")]),s._v(" 是一个 "),a("code",[s._v("class")]),s._v(" 时，"),a("code",[s._v("Bar")]),s._v(" 和 "),a("code",[s._v("typeof Bar")]),s._v(" 有什么区别？")]),s._v(" "),a("blockquote",[a("p",[s._v("我写下这段代码，但是我不理解我为什么会得到错误：")])]),s._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("MyClass")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("someMethod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" MyClass"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Cannot assign 'typeof MyClass' to MyClass? Huh?")]),s._v("\nx "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" MyClass"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])])]),a("p",[s._v("在 JavaScript 中，类仅仅是个函数，这点很重要。我们将类对象本身 -- "),a("code",[s._v("MyClass")]),s._v(" 的值，作为是构造函数。当一个构造函数被 "),a("code",[s._v("new")]),s._v(" 调用时，我们得到一个对象，它是该类的实例。")]),s._v(" "),a("p",[s._v("因此，当我们定义一个类时，实际上，我们定义了两个不同的类型。")]),s._v(" "),a("p",[s._v("第一个是由类的名字推导而来，在这个例子中是 "),a("code",[s._v("MyClass")]),s._v("。这个是类实例的类型，它定义了类的实例具有的属性和方法，它是一个通过调用类的构造函数来返回的类型。")]),s._v(" "),a("p",[s._v("第二个类型是一个匿名的类型，它是构造函数具有的类型。它包含一个返回类实例的构造函数签名（可以使用 "),a("code",[s._v("new")]),s._v(" 调用），同时，它也包含类中可能含有的 "),a("code",[s._v("static")]),s._v(" 属性和方法。它也通常被称为「静态方面」，因为它包含那些静态成员（以及作为类的构造函数）。我们可以用 "),a("code",[s._v("typeof")]),s._v(" 来引用此类型。")]),s._v(" "),a("p",[s._v("当在类型位置使用 "),a("code",[s._v("typeof")]),s._v(" 操作符时，描述了表达式的类型。因此 "),a("code",[s._v("typeof MyClass")]),s._v(" 是指 "),a("code",[s._v("MyClass")]),s._v(" 的类型。")]),s._v(" "),a("h3",{attrs:{id:"为什么我的子类属性初始值设定会覆盖基类构造函数中设置的值？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#为什么我的子类属性初始值设定会覆盖基类构造函数中设置的值？","aria-hidden":"true"}},[s._v("#")]),s._v(" 为什么我的子类属性初始值设定会覆盖基类构造函数中设置的值？")]),s._v(" "),a("p",[s._v("有关此问题，和其他初始化顺序问题，请参阅 "),a("a",{attrs:{href:"https://github.com/Microsoft/TypeScript/issues/1617",target:"_blank",rel:"noopener noreferrer"}},[s._v("#1617"),a("OutboundLink")],1),s._v("。")]),s._v(" "),a("h3",{attrs:{id:"声明类和接口有什么区别？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#声明类和接口有什么区别？","aria-hidden":"true"}},[s._v("#")]),s._v(" 声明类和接口有什么区别？")]),s._v(" "),a("p",[s._v("参阅: http://stackoverflow.com/a/14348084/1704166")]),s._v(" "),a("h3",{attrs:{id:"接口继承类，意味着什么？"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接口继承类，意味着什么？","aria-hidden":"true"}},[s._v("#")]),s._v(" 接口继承类，意味着什么？")]),s._v(" "),a("blockquote",[a("p",[s._v("这段代码是什么意思？")])]),s._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Foo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* ... */")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("interface")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Bar")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("extends")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Foo")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])]),a("p",[s._v("这创建了一个名叫 "),a("code",[s._v("Bar")]),s._v(" 的类型，它与 "),a("code",[s._v("Foo")]),s._v(" 的实例形状具有相同的成员。")])])},[],!1,null,null,null);t.default=e.exports}}]);